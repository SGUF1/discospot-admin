// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Accounts {
  id        String   @id @default(uuid())
  username  String
  password  String
  imageUrl  String   @default("https://res.cloudinary.com/dg2hpjtdh/image/upload/v1688595030/cqi5mouupo1g8vs7y6ql.jpg")
  superior  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Provincia {
  id         String      @id @default(uuid())
  name       String
  discoteche Discoteca[] @relation("ProvinciaToDiscoteca")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Discoteca {
  id           String         @id @default(uuid())
  name         String
  indirizzo    String
  civico       String
  city         String
  cap          String
  imageUrl     String
  provinciaId  String
  provincia    Provincia      @relation("ProvinciaToDiscoteca", fields: [provinciaId], references: [id])
  piani        Piano[]        @relation("DiscotecaToPiano")
  informazioni Informazione[] @relation("DiscotecaToInformazione")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  caparra      Boolean        @default(false)
  visibile     Boolean        @default(true)
  eventi       Evento[]       @relation("EventoToDiscoteca")
  sale         Sala[]         @relation("DiscotecaToSala")

  @@index([provinciaId])
}

model Piano {
  id        String      @id @default(uuid())
  nome      String
  discoteca Discoteca[] @relation("DiscotecaToPiano")
  sale Sala[]    @relation("SalaToPiano")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Informazione {
  id                 String           @id @default(uuid())
  descrizione        String
  numeroInformazione String
  discotecaId        String
  tipoInformazioneId String
  tipoInformazione   TipoInformazione @relation("InformazioneToTipoInformazione", fields: [tipoInformazioneId], references: [id])
  discoteca          Discoteca        @relation("DiscotecaToInformazione", fields: [discotecaId], references: [id])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([discotecaId])
  @@index([tipoInformazioneId])
}

model Tavolo {
  id          String    @id @default(uuid())
  numeroTavolo String
  posizioneId String
  posizione   Posizione @relation("TavoloToPosizione", fields: [posizioneId], references: [id])
  posti       Posto[]   @relation("TavoloToPosto")
  salaId String
  sala Sala @relation("SalaToTavolo", fields: [salaId], references: [id])
  prezzoPosto String
  descrizione String
  prezzo      String
  imageUrl    String
  statoId     String
  stato       Stato     @relation("TavoloToStato", fields: [statoId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([posizioneId])
  @@index([salaId])
  @@index([statoId])
}

model Posizione {
  id        String   @id @default(uuid())
  nome      String
  tavoli    Tavolo[] @relation("TavoloToPosizione")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stato {
  id        String   @id @default(uuid())
  nome      String
  tavoli    Tavolo[] @relation("TavoloToStato")
  posti     Posto[]  @relation("PostoToStato")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Posto {
  id        String   @id @default(uuid())
  numero    Int
  tavoloId  String
  tavolo    Tavolo   @relation("TavoloToPosto", fields: [tavoloId], references: [id])
  stato     Stato    @relation("PostoToStato", fields: [statoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  statoId   String

  @@index([tavoloId])
  @@index([statoId])
}

model TipoInformazione {
  id           String         @id @default(uuid())
  nome         String
  informazioni Informazione[] @relation("InformazioneToTipoInformazione")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Evento {
  id                String          @id @default(uuid())
  nome              String
  imageUrl          String
  discotecaId       String
  discoteca        Discoteca       @relation("EventoToDiscoteca", fields: [discotecaId], references: [id])
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  prioriti          String
  tipologiaEventoId String
  tipologiaEvento   TipologiaEvento @relation("TipologiaToEvento", fields: [tipologiaEventoId], references: [id])
  eventoSala Boolean
  salaId String?
  sala Sala? @relation("SalaToEvento", fields: [salaId], references: [id])
  description       String
  oraInizio         String
  oraFine           String

  @@index([tipologiaEventoId])
  @@index([discotecaId])
  @@index([salaId])
}

model TipologiaEvento {
  id        String   @id @default(uuid())
  name      String
  eventi    Evento[] @relation("TipologiaToEvento")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sala {
  id         String      @id @default(uuid())
  nome       String
  descrizione String
  imageUrl String
  discotecaId String
  discoteca Discoteca @relation("DiscotecaToSala", fields: [discotecaId], references: [id])
  tavoli Tavolo[] @relation("SalaToTavolo")
  eventi Evento[] @relation("SalaToEvento")
  pianoId String
  piano Piano @relation("SalaToPiano", fields: [pianoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([discotecaId])
  @@index([pianoId])
}