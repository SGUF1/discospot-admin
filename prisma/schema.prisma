// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Accounts {
  id          String     @id @default(uuid())
  username    String
  password    String
  imageUrl    String     @default("https://res.cloudinary.com/dg2hpjtdh/image/upload/v1688595030/cqi5mouupo1g8vs7y6ql.jpg")
  superior    Boolean    @default(false)
  discotecaId String?
  discoteca   Discoteca? @relation("AccountToDiscoteca", fields: [discotecaId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([discotecaId])
}

model Provincia {
  id         String      @id @default(uuid())
  name       String
  discoteche Discoteca[] @relation("ProvinciaToDiscoteca")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Discoteca {
  id               String         @id @default(uuid())
  name             String
  indirizzo        String
  civico           String
  city             String
  cap              String
  imageUrl         String
  provinciaId      String
  maximumOrderDate Int            @default(0)
  admins           Accounts[]     @relation("AccountToDiscoteca")
  provincia        Provincia      @relation("ProvinciaToDiscoteca", fields: [provinciaId], references: [id])
  piani            Piano[]        @relation("DiscotecaToPiano")
  informazioni     Informazione[] @relation("DiscotecaToInformazione")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  caparra          Boolean        @default(false)
  visibile         Boolean        @default(true)
  eventi           Evento[]       @relation("EventoToDiscoteca")
  sale             Sala[]         @relation("DiscotecaToSala")
  priority         Int            @default(1)
  menu             Menu[]
  orders           Order[]        @relation("DiscotecaToOrder")
  like             Int            @default(0)
  userAccounts     UserAccount[]
  date             Data[]         @relation("DiscotecaToDate")

  @@index([provinciaId])
}

model Piano {
  id        String      @id @default(uuid())
  nome      String
  discoteca Discoteca[] @relation("DiscotecaToPiano")
  sale      Sala[]      @relation("SalaToPiano")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Informazione {
  id                 String           @id @default(uuid())
  descrizione        String           @db.Text
  numeroInformazione Int
  discotecaId        String?
  tipoInformazioneId String
  tipoInformazione   TipoInformazione @relation("InformazioneToTipoInformazione", fields: [tipoInformazioneId], references: [id])
  discoteca          Discoteca?       @relation("DiscotecaToInformazione", fields: [discotecaId], references: [id])
  eventoId           String?
  evento             Evento?          @relation("EventoToInformazione", fields: [eventoId], references: [id])
  salaId             String?
  sala               Sala?            @relation("SalaToInformazione", fields: [salaId], references: [id])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([discotecaId])
  @@index([eventoId])
  @@index([salaId])
  @@index([tipoInformazioneId])
}

model Tavolo {
  id           String      @id @default(uuid())
  numeroTavolo String
  posizioneId  String
  posizione    Posizione   @relation("TavoloToPosizione", fields: [posizioneId], references: [id])
  posti        Posto[]     @relation("TavoloToPosto")
  salaId       String
  sala         Sala        @relation("SalaToTavolo", fields: [salaId], references: [id])
  descrizione  String      @db.Text
  prezzo       String
  imageUrl     String
  numeroMinimo Int?
  statoId      String
  stato        Stato       @relation("TavoloToStato", fields: [statoId], references: [id])
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([posizioneId])
  @@index([salaId])
  @@index([statoId])
}

model Posizione {
  id        String   @id @default(uuid())
  nome      String
  tavoli    Tavolo[] @relation("TavoloToPosizione")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stato {
  id        String   @id @default(uuid())
  nome      String
  tavoli    Tavolo[] @relation("TavoloToStato")
  posti     Posto[]  @relation("PostoToStato")
  sale      Sala[]   @relation("StatoToSale")
  order     Order[]  @relation("StatoToOrder")
  colore    String   @default("#fff")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Posto {
  id        String   @id @default(uuid())
  numero    Int
  tavoloId  String
  tavolo    Tavolo   @relation("TavoloToPosto", fields: [tavoloId], references: [id])
  stato     Stato    @relation("PostoToStato", fields: [statoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  statoId   String

  @@index([tavoloId])
  @@index([statoId])
}

model TipoInformazione {
  id           String         @id @default(uuid())
  nome         String
  informazioni Informazione[] @relation("InformazioneToTipoInformazione")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Evento {
  id                String          @id @default(uuid())
  nome              String
  imageUrl          String
  discotecaId       String
  discoteca         Discoteca       @relation("EventoToDiscoteca", fields: [discotecaId], references: [id])
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  prioriti          String
  tipologiaEventoId String
  tipologiaEvento   TipologiaEvento @relation("TipologiaToEvento", fields: [tipologiaEventoId], references: [id])
  eventoSala        Boolean
  salaId            String?
  sala              Sala?           @relation("SalaToEvento", fields: [salaId], references: [id])
  informazioni      Informazione[]  @relation("EventoToInformazione")
  oraInizio         String
  oraFine           String

  @@index([tipologiaEventoId])
  @@index([discotecaId])
  @@index([salaId])
}

model TipologiaEvento {
  id        String   @id @default(uuid())
  name      String
  eventi    Evento[] @relation("TipologiaToEvento")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sala {
  id           String         @id @default(uuid())
  nome         String
  imageUrl     String
  discotecaId  String
  discoteca    Discoteca      @relation("DiscotecaToSala", fields: [discotecaId], references: [id])
  tavoli       Tavolo[]       @relation("SalaToTavolo")
  eventi       Evento[]       @relation("SalaToEvento")
  statoId      String
  stato        Stato          @relation("StatoToSale", fields: [statoId], references: [id])
  pianoId      String
  date         Data[]         @relation("SalaToDate")
  piano        Piano          @relation("SalaToPiano", fields: [pianoId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  informazioni Informazione[] @relation("SalaToInformazione")

  @@index([discotecaId])
  @@index([pianoId])
  @@index([statoId])
}

model Data {
  id          String    @id @default(uuid())
  data        DateTime?
  salaId      String?
  sala        Sala?     @relation("SalaToDate", fields: [salaId], references: [id])
  giorni      Json?
  dateRange   Json?
  type        String?
  discotecaId String
  discoteca   Discoteca @relation("DiscotecaToDate", fields: [discotecaId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([salaId])
  @@index([discotecaId])
}

model Menu {
  id          String    @id @default(uuid())
  nome        String
  discotecaId String
  portate     Portata[] @relation("MenuToPortata")
  isVisible   Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  discoteca   Discoteca @relation(fields: [discotecaId], references: [id])

  @@index([discotecaId])
}

model Prodotto {
  id          String      @id @default(uuid())
  nome        String
  portataId   String
  portata     Portata     @relation("PortataToProdotto", fields: [portataId], references: [id])
  descrizione String
  prezzo      Float
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([portataId])
}

model Portata {
  id            String     @id @default(uuid())
  nome          String
  menuId        String
  menu          Menu       @relation("MenuToPortata", fields: [menuId], references: [id])
  prodotti      Prodotto[] @relation("PortataToProdotto")
  numeroPortata Int
  lastPortata   Boolean
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([menuId])
}

model OptionProdotto {
  id        String   @id @default(uuid())
  nome      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String      @id @default(uuid())
  discotecaId   String
  discoteca     Discoteca   @relation("DiscotecaToOrder", fields: [discotecaId], references: [id])
  orderItems    OrderItem[]
  isPaid        Boolean     @default(false)
  phone         String      @default("")
  codice        String      @default("")
  numeroPersone Int         @default(0)
  orderDate     DateTime
  expiredDate   DateTime
  statoId       String
  stato         Stato       @relation("StatoToOrder", fields: [statoId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([discotecaId])
  @@index([statoId])
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  tavoloId   String
  tavolo     Tavolo   @relation(fields: [tavoloId], references: [id])
  prodottoId String
  prodotto   Prodotto @relation(fields: [prodottoId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([orderId])
  @@index([tavoloId])
  @@index([prodottoId])
}

model UserAccount {
  id         String      @id
  discoteche Discoteca[]
}
