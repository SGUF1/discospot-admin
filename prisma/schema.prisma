// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Accounts {
  id          String     @id @default(uuid())
  username    String
  password    String
  imageUrl    String     @default("https://res.cloudinary.com/dg2hpjtdh/image/upload/v1688595030/cqi5mouupo1g8vs7y6ql.jpg")
  superior    Boolean    @default(false)
  discotecaId String?
  discoteca   Discoteca? @relation("AccountToDiscoteca", fields: [discotecaId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([discotecaId])
}

model Provincia {
  id         String      @id @default(uuid())
  name       String
  discoteche Discoteca[] @relation("ProvinciaToDiscoteca")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Discoteca {
  id               String         @id @default(uuid())
  name             String
  indirizzo        String
  civico           String
  city             String
  cap              String
  imageUrl         String
  provinciaId      String
  maximumOrderDate Int            @default(0)
  admins           Accounts[]     @relation("AccountToDiscoteca")
  provincia        Provincia      @relation("ProvinciaToDiscoteca", fields: [provinciaId], references: [id])
  piani            Piano[]        @relation("DiscotecaToPiano")
  informazioni     Informazione[] @relation("DiscotecaToInformazione")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  caparra          Boolean        @default(false)
  visibile         Boolean        @default(true)
  eventi           Evento[]       @relation("EventoToDiscoteca")
  sale             Sala[]         @relation("DiscotecaToSala")
  priority         Int            @default(1)
  menu             Menu[]
  orders           Order[]        @relation("DiscotecaToOrder")
  like             Int            @default(0)
  userAccounts     UserAccount[]
  date             Data[]         @relation("DiscotecaToDate")
  liste            Lista[]        @relation("ListaToDiscoteca")
  scuola           Boolean        @default(false)
  ticketCommission Int            @default(0)
  tableCommission  Int            @default(0)

  @@index([provinciaId])
}

model Piano {
  id        String      @id @default(uuid())
  nome      String
  discoteca Discoteca[] @relation("DiscotecaToPiano")
  sale      Sala[]      @relation("SalaToPiano")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Informazione {
  id                 String           @id @default(uuid())
  descrizione        String           @db.Text
  numeroInformazione Int
  discotecaId        String?
  tipoInformazioneId String
  tipoInformazione   TipoInformazione @relation("InformazioneToTipoInformazione", fields: [tipoInformazioneId], references: [id])
  discoteca          Discoteca?       @relation("DiscotecaToInformazione", fields: [discotecaId], references: [id])
  eventoId           String?
  evento             Evento?          @relation("EventoToInformazione", fields: [eventoId], references: [id])
  salaId             String?
  listaId            String?
  lista              Lista?           @relation("ListaToInformazione", fields: [listaId], references: [id])
  sala               Sala?            @relation("SalaToInformazione", fields: [salaId], references: [id])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([discotecaId])
  @@index([eventoId])
  @@index([listaId])
  @@index([salaId])
  @@index([tipoInformazioneId])
}

model Tavolo {
  id               String            @id @default(uuid())
  numeroTavolo     String
  posizioneId      String
  posizione        Posizione         @relation("TavoloToPosizione", fields: [posizioneId], references: [id])
  salaId           String
  sala             Sala              @relation("SalaToTavolo", fields: [salaId], references: [id])
  descrizione      String            @db.Text
  prezzo           String
  imageUrl         String
  numeroMinimo     Int?
  numeroMassimo    Int?              @default(0)
  prezzoPerPosto   Boolean           @default(false)
  calendarioTavolo CalendarioTavolo? @relation()
  order            Order[]           @relation("OrderToTavolo")
  statoId          String
  stato            Stato             @relation("TavoloToStato", fields: [statoId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  date             Data[]            @relation("TavoloToData")

  @@index([posizioneId])
  @@index([salaId])
  @@index([statoId])
}

model Posizione {
  id        String   @id @default(uuid())
  nome      String
  tavoli    Tavolo[] @relation("TavoloToPosizione")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stato {
  id        String   @id @default(uuid())
  nome      String
  tavoli    Tavolo[] @relation("TavoloToStato")
  sale      Sala[]   @relation("StatoToSale")
  order     Order[]  @relation("StatoToOrder")
  colore    String   @default("#fff")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      Data[]   @relation("StatoToData")
}

// model Posto {
//   id        String   @id @default(uuid())
//   numero    Int
//   tavoloId  String
//   tavolo    Tavolo   @relation("TavoloToPosto", fields: [tavoloId], references: [id])
//   stato     Stato    @relation("PostoToStato", fields: [statoId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   statoId   String

//   @@index([tavoloId])
//   @@index([statoId])
// }

model TipoInformazione {
  id           String         @id @default(uuid())
  nome         String
  informazioni Informazione[] @relation("InformazioneToTipoInformazione")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model CalendarioTavolo {
  id        String   @id @default(uuid())
  data      Data[]
  tavoloId  String   @unique
  tavolo    Tavolo   @relation(fields: [tavoloId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  statoId   String?

  @@index([tavoloId])
}

model Evento {
  id                String          @id @default(uuid())
  nome              String
  imageUrl          String
  discotecaId       String
  discoteca         Discoteca       @relation("EventoToDiscoteca", fields: [discotecaId], references: [id])
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  prioriti          String
  tipologiaEventoId String
  tipologiaEvento   TipologiaEvento @relation("TipologiaToEvento", fields: [tipologiaEventoId], references: [id])
  eventoSala        Boolean
  salaId            String?
  sala              Sala?           @relation("SalaToEvento", fields: [salaId], references: [id])
  informazioni      Informazione[]  @relation("EventoToInformazione")
  oraInizio         String
  oraFine           String

  @@index([tipologiaEventoId])
  @@index([discotecaId])
  @@index([salaId])
}

model TipologiaEvento {
  id        String   @id @default(uuid())
  name      String
  eventi    Evento[] @relation("TipologiaToEvento")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sala {
  id           String         @id @default(uuid())
  nome         String
  imageUrl     String
  discotecaId  String
  interaSala   Boolean        @default(false)
  prezzoSala   Int            @default(0)
  discoteca    Discoteca      @relation("DiscotecaToSala", fields: [discotecaId], references: [id])
  tavoli       Tavolo[]       @relation("SalaToTavolo")
  eventi       Evento[]       @relation("SalaToEvento")
  statoId      String
  stato        Stato          @relation("StatoToSale", fields: [statoId], references: [id])
  pianoId      String
  date         Data[]         @relation("SalaToDate")
  piano        Piano          @relation("SalaToPiano", fields: [pianoId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  informazioni Informazione[] @relation("SalaToInformazione")

  @@index([discotecaId])
  @@index([pianoId])
  @@index([statoId])
}

model Data {
  id                 String            @id @default(uuid())
  data               DateTime?
  salaId             String?
  sala               Sala?             @relation("SalaToDate", fields: [salaId], references: [id])
  statoId            String?
  stato              Stato?            @relation("StatoToData", fields: [statoId], references: [id])
  giorni             Json?
  dateRange          Json?
  type               String?
  tavoloId           String?
  tavolo             Tavolo?           @relation("TavoloToData", fields: [tavoloId], references: [id])
  discotecaId        String?
  discoteca          Discoteca?        @relation("DiscotecaToDate", fields: [discotecaId], references: [id])
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  calendarioTavolo   CalendarioTavolo? @relation(fields: [calendarioTavoloId], references: [id])
  calendarioTavoloId String?

  @@index([salaId])
  @@index([discotecaId])
  @@index([calendarioTavoloId])
  @@index([statoId])
  @@index([tavoloId])
}

model Menu {
  id          String    @id @default(uuid())
  nome        String
  discotecaId String
  portate     Portata[] @relation("MenuToPortata")
  isVisible   Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  discoteca   Discoteca @relation(fields: [discotecaId], references: [id])

  @@index([discotecaId])
}

model Prodotto {
  id          String      @id @default(uuid())
  nome        String
  portataId   String
  portata     Portata     @relation("PortataToProdotto", fields: [portataId], references: [id])
  descrizione String      @db.Text
  prezzo      Float
  limite      Int
  itemProduct Boolean     @default(false)
  imageUrl    String
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([portataId])
}

model Portata {
  id                  String      @id @default(uuid())
  nome                String
  menuId              String
  menu                Menu        @relation("MenuToPortata", fields: [menuId], references: [id])
  prodotti            Prodotto[]  @relation("PortataToProdotto")
  numeroBibiteDiverse Int?
  singolaSelezione    Boolean     @default(false)
  numeroBibiteTotale  Int?
  numeroPortata       Int
  lastPortata         Boolean
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  OrderItem           OrderItem[]

  @@index([menuId])
}

model OptionProdotto {
  id        String   @id @default(uuid())
  nome      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                  String        @id @default(uuid())
  discotecaId         String
  discoteca           Discoteca     @relation("DiscotecaToOrder", fields: [discotecaId], references: [id])
  tavoloId            String
  tavolo              Tavolo        @relation("OrderToTavolo", fields: [tavoloId], references: [id])
  orderItems          OrderItem[]
  numeroPersonePagato Int           @default(0)
  isPaid              Boolean       @default(false)
  phone               String        @default("")
  completeName        String        @default("")
  codice              String?       @unique
  prezzoTotale        Float         @default(0)
  numeroPersone       Int           @default(0)
  proprietario        Boolean       @default(true)
  orderDate           DateTime
  expiredDate         DateTime?
  taxPrezzo           Float         @default(0)
  statoId             String
  stato               Stato         @relation("StatoToOrder", fields: [statoId], references: [id])
  userAccounts        UserAccount[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@index([discotecaId])
  @@index([statoId])
  @@index([tavoloId])
}

model OrderItem {
  id            String   @id @default(uuid())
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id])
  portataId     String?
  portata       Portata? @relation(fields: [portataId], references: [id])
  portataString String   @default("")
  prodottoId    String
  prodotto      Prodotto @relation(fields: [prodottoId], references: [id])
  quantity      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([portataId])
  @@index([orderId])
  @@index([prodottoId])
}

model UserAccount {
  id             String           @id
  name           String           @default("")
  surname        String           @default("")
  gender         String           @default("")
  discoteche     Discoteca[]
  orders         Order[]
  orderBiglietti OrderBiglietto[] @relation("BigliettoToUser")
  domanda2       String           @default("")
  domanda3       String           @default("")
  eta            Int              @default(5)
  generi         Generi[]         @relation("UserToGenere")
}

model Generi {
  id     String      @id @default(uuid())
  nome   String
  userId String
  user   UserAccount @relation("UserToGenere", fields: [userId], references: [id])

  @@index([userId])
}

model Lista {
  id                 String           @id @default(uuid())
  nome               String
  discotecaId        String
  discoteca          Discoteca        @relation("ListaToDiscoteca", fields: [discotecaId], references: [id])
  prezzoBiglietto    Float
  quantity           Int?
  priority           Int
  bigliettiRimanenti Int?
  prezzoDonna        Float?
  unisex             Boolean          @default(false)
  imageUrl           String
  bigliettiInfiniti  Boolean
  informazioni       Informazione[]   @relation("ListaToInformazione")
  dataLimite         DateTime
  orderBiglietti     OrderBiglietto[] @relation("BigliettoToLista")
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([discotecaId])
}

model OrderBiglietto {
  id            String       @id @default(uuid())
  userAccountId String?
  userAccount   UserAccount? @relation("BigliettoToUser", fields: [userAccountId], references: [id])
  phone         String       @default("")
  prezzo        Float
  data          DateTime
  completeName  String       @default("")
  isPaid        Boolean      @default(false)
  codice        String?      @unique
  listaId       String
  gender        String       @default("")
  confermato    Boolean      @default(false)
  lista         Lista        @relation("BigliettoToLista", fields: [listaId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([userAccountId])
  @@index([listaId])
}
